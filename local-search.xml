<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>搭建 hexo 博客并部署到 github</title>
    <link href="/2024/10/12/blog/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <url>/2024/10/12/blog/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建-hexo-博客并部署到-github"><a href="#搭建-hexo-博客并部署到-github" class="headerlink" title="搭建 hexo 博客并部署到 github"></a>搭建 hexo 博客并部署到 github</h2><h4 id="建立本地项目"><a href="#建立本地项目" class="headerlink" title="建立本地项目"></a>建立本地项目</h4><ul><li>新建空文件夹</li><li>右键点击 <code>git bash here</code> </li><li>安装 hexo 框架：<code>npm install -g hexo-cli</code></li><li>初始化文件夹：<code>hexo init</code></li><li>安装依赖：<code>npm install</code></li><li>启动服务器：<code>hexo server</code></li></ul><h4 id="将博客推到远程仓库"><a href="#将博客推到远程仓库" class="headerlink" title="将博客推到远程仓库"></a>将博客推到远程仓库</h4><ul><li><p>新建 git 仓库，名称为：<username>.github.io (好处是：通过<code>https://username.github.io/</code>就可以访问到你的仓库&#x2F;blog&#x2F;project主页, 而不需要在 github.io&#x2F;后面再加上仓库名)</p></li><li><p>安装插件：<code>npm install hexo-deployer-git --save </code> 为了能够使Hexo部署到GitHub上，需要安装一个插件：（在项目目录下执行命令）</p></li><li><p>创建一个 SSH key：<code>ssh-keygen -t -rsa -C &quot;email address&quot;</code></p></li><li><p>将密钥添加到 github，验证是否添加成功：<code>ssh -T git@github.com</code></p></li><li><p>在 _config.yml 文件最后修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-title class_">Deployment</span><br>## <span class="hljs-title class_">Docs</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy</span>:<br>  <span class="hljs-attr">type</span>: git<br>  <span class="hljs-attr">repo</span>: git@github.<span class="hljs-property">com</span>:<span class="hljs-title class_">Rodma1</span>/<span class="hljs-title class_">Rodma1</span>.<span class="hljs-property">github</span>.<span class="hljs-property">io</span>.<span class="hljs-property">git</span><br>  <span class="hljs-attr">branch</span>: master<br></code></pre></td></tr></table></figure><p>注意 type: 后面一定要有空格，不然会报错，仓库地址写 ssh 地址（以后提交时不用输用户名密码）</p></li><li><p>推送到 github：<code>hexo g</code>   <code>hexo d</code></p></li></ul><p>hexo clean &amp;&amp; hexo deploy</p><h2 id="网站的配置"><a href="#网站的配置" class="headerlink" title="网站的配置"></a>网站的配置</h2><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th align="left">设置</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。 支持多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言。 使用 <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">2 个字母的 ISO-639-1 代码</a>，或 <a href="https://hexo.io/docs/internationalization">它的变体</a>。 默认为 <code>en</code>。</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。 Hexo 默认使用您电脑的时区。 请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。 一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th align="left">设置</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"><code>url&#39;s pathname</code></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>pretty_urls.trailing_html</code></td><td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="left"><code>t</code></td></tr></tbody></table><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><ul><li><p>推送失败：错误码 443 ，<a href="https://blog.csdn.net/qq_38076935/article/details/120392154">配置一下 host 文件</a></p></li><li><p>仓库找不到：重新配置 github 用户名、邮箱等（注意没有下划线）</p></li></ul><p>然后创建一个私有仓库保存我们自己的hexo文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;# hexo&quot; &gt;&gt; README.md<br>git init<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote add origin git@github.com:Rodma1/hexo.git<br>git push -u origin main<br></code></pre></td></tr></table></figure><h4 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h4><p><a href="https://rodma1.github.io/">https://rodma1.github.io/</a></p><p>官方文档： <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/12/hello-world/"/>
    <url>/2024/10/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能-机器学习基础</title>
    <link href="/2020/11/17/programmingLanguage/python/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/11/17/programmingLanguage/python/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>前言：一个还在奋斗的年轻人，我觉得人工智能的函数太多，记不住，为了方便查找，用了老师的笔记，不会的函数可以从本站右上角 <img src="image/20201117161118466.png" alt="在这里插入图片描述" style="zoom:50%;" />搜索 ，很方便，另外想详细了解的，可以从我的<a href="https://rodma1.github.io/artificial-intelligence/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%E5%BA%93%EF%BC%89/">github</a>中了解。</p><h2 id="一-机器学习概述"><a href="#一-机器学习概述" class="headerlink" title="一 .机器学习概述"></a>一 .机器学习概述</h2><h3 id="1-1-人工智能概述"><a href="#1-1-人工智能概述" class="headerlink" title="1.1 人工智能概述"></a>1.1 人工智能概述</h3><pre><code class="hljs">1.人工智能起源    图灵测试    达特茅斯会议2.人工智能三个阶段    1980年代是正式成形期    1990-2010年代是蓬勃发展期    2012年之后是深度学习期3.人工智能、机器学习和深度学习    机器学习是人工智能的一个实现途径    深度学习是机器学习的一个方法发展而来4.主要分支介绍    1.计算机视觉        eg:人脸识别    2.自然语言处理        语音识别        语义识别    3.机器人5.人工智能必备三要素    数据    算法    计算力6.gpu,cpu    gpu -- 计算密集型    cpu -- IO密集型</code></pre><h3 id="1-2-机器学习工作流程"><a href="#1-2-机器学习工作流程" class="headerlink" title="1.2 机器学习工作流程"></a>1.2 机器学习工作流程</h3><pre><code class="hljs">1.定义    数据    自动分析获得模型    预测    从数据中自动分析获得模型，并利用模型对未知数据进行预测2.工作流程    1.获取数据    2.数据基本处理    3.特征工程    4.机器学习（模型训练）    5.模型评估3.获取到的数据集介绍    1.专有名词        样本        特征        目标值（标签值）        特征值    2.数据类型构成        类型一：特征值+目标值            目标值分为是离散还是连续        类型二： 只有特征值，没有目标值    3.数据划分        训练数据（训练集） -- 构建模型            0.7--0.8        测试数据（测试集） -- 模型评估            0.2--0.34.数据基本处理    对数进行缺失值、去除异常值等处理5.特征工程    1.定义        把数据转换成为机器更容易识别的数据    2.为什么需要特征工程        数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已    3.包含内容        特征提取        特征预处理        特征降维6.机器学习    选择合适的算法对模型进行训练7.模型评估    对训练好的模型进行评估</code></pre><h3 id="1-3-机器学习算法分类"><a href="#1-3-机器学习算法分类" class="headerlink" title="1.3 机器学习算法分类"></a>1.3 机器学习算法分类</h3><pre><code class="hljs">1.监督学习 -- 有特征值，有目标值    目标值连续-- 回归    目标值离散-- 分类2.无监督学习 -- 仅有特征值3.半监督学习    有特征值，但是一部分数据有目标值，一部分没有4.强化学习    动态过程，上一步数据的输出是下一步数据的输入    四要素：agent, action, environment,Reward,</code></pre><h3 id="1-4-模型评估"><a href="#1-4-模型评估" class="headerlink" title="1.4 模型评估"></a>1.4 模型评估</h3><pre><code class="hljs">1.分类模型评估    准确率    精确率    召回率    F1-score    AUC指标2 回归模型评估    均方根误差    相对平方误差    平均绝对误差    相对绝对误差    决定系数3.拟合    欠拟合    过拟合</code></pre><h2 id="二-机器学习基础环境安装与使用"><a href="#二-机器学习基础环境安装与使用" class="headerlink" title="二. 机器学习基础环境安装与使用"></a>二. 机器学习基础环境安装与使用</h2><h3 id="2-1-库的安装"><a href="#2-1-库的安装" class="headerlink" title="2.1 库的安装"></a>2.1 库的安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h3 id="2-2-Jupyter-Notebook使用"><a href="#2-2-Jupyter-Notebook使用" class="headerlink" title="2.2 Jupyter Notebook使用"></a>2.2 Jupyter Notebook使用</h3><pre><code class="hljs">1.jupyter定义    开源的科学计算平台    类比ipython    可以运行代码，可以做笔记    文件后缀： .ipynb2.jupyter和pycharm对比    jupyter -- 探索性数据，一边分析，一边运行    pycharm -- 适合逻辑性强的操作（web）3.如何使用    jupyter notebook    使用方式和ipython一样，但是要比ipython强大（可以画图）4.cell    一对In Out会话被视作一个代码单元，称为cell5.jupyter两种模式    编辑模式        直接点击进去，可以进行编写代码，做笔记    命令模式        通过快捷键，操作，eg:添加一行6.快捷键    通用：        Shift+Enter，执行本单元代码，并跳转到下一单元        Ctrl+Enter，执行本单元代码，留在本单元    命令模式        Y，cell切换到Code模式        M，cell切换到Markdown模式        A，在当前cell的上面添加cell        B，在当前cell的下面添加cell        双击D：删除当前cell    编辑模式：        和常规方式一样7.markdown语法    # -- *级标题    - -- 缩进</code></pre><h2 id="三-Matplotlib"><a href="#三-Matplotlib" class="headerlink" title="三 . Matplotlib"></a>三 . Matplotlib</h2><h3 id="3-1-Matplotlib之HelloWorld"><a href="#3-1-Matplotlib之HelloWorld" class="headerlink" title="3.1 Matplotlib之HelloWorld"></a>3.1 Matplotlib之HelloWorld</h3><pre><code class="hljs">1.定义    主要用于开发2D图表（3D）    数据分析，基于分析，进行展示2.绘图流程【***】    1.创建画布    2.绘制图像    3.显示图像3.matplotlib三层结构    容器层        canvas        figure        axes    辅助显示层        添加x轴，y轴描述，标题。。。    图像层        绘制什么图像的声明</code></pre><h3 id="3-2-折线图-plot-与基础绘图功能"><a href="#3-2-折线图-plot-与基础绘图功能" class="headerlink" title="3.2 折线图(plot)与基础绘图功能"></a>3.2 折线图(plot)与基础绘图功能</h3><pre><code class="hljs">1.图像保存    plt.savefig()    注意：图像保存一定要放到show前面2.添加x轴,y轴刻度    plt.xticks    plt.yticks    注意:第一个参数必须是数字,如果不是数字,需要进行值替换3.添加网格    plt.grid()        参数:        linestyle -- 绘制网格的方式        alpha -- 透明度4.添加描述信息    plt.xlabel(&quot;时间&quot;)    plt.ylabel(&quot;温度&quot;)    plt.title(&quot;一小时温度变化图&quot;, fontsize=20)5.多次plot    直接进行绘制6.显示图例    plt.legend()    注意:需要在显示之前,声明plot里面的具体值7.多个坐标系图像显示【###】    fig, axes = plt.subplots()        nrows -- 几行        ncols -- 几列        注意:有些方法需要添加set_*8.折线图应用场景    1.表示数据变化    2.绘制一些数学图像</code></pre><h3 id="3-3-常见图形绘制"><a href="#3-3-常见图形绘制" class="headerlink" title="3.3 常见图形绘制"></a>3.3 常见图形绘制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>折线图 -- plt.plot<br>    变化<br><span class="hljs-number">2.</span>散点图 -- plt.scatter()<br>    分布规律<br><span class="hljs-number">3.</span>柱状图 -- plt.bar<br>    统计、对比<br><span class="hljs-number">4.</span>直方图 -- plt.hist()<br>    统计，分布<br><span class="hljs-number">5.</span>饼图 -- plt.pie()<br>    占比<br></code></pre></td></tr></table></figure><h2 id="四-Numpy"><a href="#四-Numpy" class="headerlink" title="四.  Numpy"></a>四.  Numpy</h2><h3 id="4-1-Numpy优势"><a href="#4-1-Numpy优势" class="headerlink" title="4.1 Numpy优势"></a>4.1 Numpy优势</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>定义<br>    开源的Python科学计算库，<br>    用于快速处理任意维度的数组<br>    Numpy中，存储对象是ndarray<br><span class="hljs-number">2.</span>创建<br>    np.array([])<br><span class="hljs-number">3.</span>numpy的优势<br>    内存块风格 -- 一体式存储<br>    支持并行化运算<br>    效率高于纯Python代码 -- 底层使用了C，内部释放了GIL<br></code></pre></td></tr></table></figure><h3 id="4-2-N维数组-ndarray"><a href="#4-2-N维数组-ndarray" class="headerlink" title="4.2 N维数组-ndarray"></a>4.2 N维数组-ndarray</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>ndarray的属性<br>    属性名字    属性解释<br>    ndarray.shape   数组维度的元组<br>    ndarray.ndim    数组维数<br>    ndarray.size    数组中的元素数量<br>    ndarray.itemsize    一个数组元素的长度（字节）<br>    ndarray.dtype   数组元素的类型<br><span class="hljs-number">2.</span>ndarray的形状<br>    np.array()<br>        三维数组不好理解 -- excel中有多个sheet<br><span class="hljs-number">3.</span>ndarray的类型<br>    <span class="hljs-built_in">bool</span><br>    <span class="hljs-built_in">int</span><br>    <span class="hljs-built_in">float</span><br>    <span class="hljs-built_in">str</span><br>    ...<br>    注意：若不指定，整数默认int64，小数默认float64<br></code></pre></td></tr></table></figure><h3 id="4-3-基本操作"><a href="#4-3-基本操作" class="headerlink" title="4.3 基本操作"></a>4.3 基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> 生成数组的方法<br>    <span class="hljs-number">1.</span>生成<span class="hljs-number">0</span>和<span class="hljs-number">1</span>的数组<br>        np.ones()<br>        np.ones_like()<br>    <span class="hljs-number">2.</span>从现有数组中生成<br>        np.array -- 深拷贝<br>        np.asarray -- 浅拷贝<br>    <span class="hljs-number">3.</span>生成固定范围数组<br>        np.linspace()<br>            nun -- 生成等间隔的多少个<br>        np.arange()<br>            step -- 每间隔多少生成数据<br>        np.logspace()<br>            生成以<span class="hljs-number">10</span>的N次幂的数据<br>    <span class="hljs-number">4</span> 生成随机数组<br>        <span class="hljs-number">1.</span>均匀分布生成<br>            np.random.uniform()<br>                low<br>                high<br>                size<br>        <span class="hljs-number">2.</span>正态分布<br>            均值，方差<br>            均值 -- 图形的左右位置<br>            方差 -- 图像是瘦，还是胖<br>                值越小，图形越瘦高，数据越集中<br>                值越大，图形越矮胖，数据越分散<br>        <span class="hljs-number">3.</span>正态分布api<br>            np.random.normal()<br>                low<br>                high<br>                size<br><span class="hljs-number">2.</span>数组的索引、切片<br>    直接索引<br>    先对行进行索引，再进行列索引 -- [*, <span class="hljs-comment">#]</span><br>    高维数组索引，从宏观到微观<br><span class="hljs-number">3.</span>形状修改<br>    <span class="hljs-number">1.</span>对象.reshape<br>        不进行行列互换，产生新变量<br>    <span class="hljs-number">2.</span>对象.resize<br>        不进行行列互换,对原值进行更改<br>    <span class="hljs-number">3.</span>对象.T<br>        进行行列互换<br><span class="hljs-number">4.</span>类型修改<br>    对象.astype()<br><span class="hljs-number">5.</span>数组去重<br>    np.unique()<br></code></pre></td></tr></table></figure><h3 id="4-4-ndarray运算"><a href="#4-4-ndarray运算" class="headerlink" title="4.4 ndarray运算"></a>4.4 ndarray运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>逻辑运算<br>    大于，小于直接进行判断<br>    赋值：满足要求，直接进行赋值<br><span class="hljs-number">2.</span>通用判断函数<br>    np.<span class="hljs-built_in">all</span>()<br>        所有满足要求，才返回<span class="hljs-literal">True</span><br>    np.<span class="hljs-built_in">any</span>()<br>        只要有一个满足要求，就返回<span class="hljs-literal">True</span><br><span class="hljs-number">3.</span>三元运算符<br>    np.where()<br>        满足要求，赋值第一个值，否则赋值第二个值<br>    np.logical_and()<br>        并<br>    np.logical_or()<br>        或<br><span class="hljs-number">4.</span>统计运算<br>    <span class="hljs-built_in">min</span><br>    <span class="hljs-built_in">max</span><br>    midian<br>    mean<br>    std -- 标准差<br>    var -- 方差<br>    argmax -- 最大值下标<br>    argmin -- 最小值下标<br></code></pre></td></tr></table></figure><h3 id="4-5-矩阵"><a href="#4-5-矩阵" class="headerlink" title="4.5 矩阵"></a>4.5 矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>矩阵和向量<br>    矩阵：理解-二维数组<br>    向量：理解-一维数组<br><span class="hljs-number">2.</span>加法和标量乘法<br>    加法： 对应位置相加<br>    乘法： 标量和每个位置的元素相乘<br><span class="hljs-number">3.</span>矩阵向量（矩阵）乘法<br>    [M行, N列]*[N行, L列] = [M行, L列]<br><span class="hljs-number">4.</span>矩阵乘法性质<br>    <span class="hljs-number">1.</span>满足结合律，不满足交换律<br><span class="hljs-number">5.</span>单位矩阵<br>    对角线为<span class="hljs-number">1</span>，其他位置为<span class="hljs-number">0</span>的矩阵<br><span class="hljs-number">6.</span>逆<br>    矩阵A*矩阵B=单位矩阵I<br>    那么A和B就互为逆矩阵<br><span class="hljs-number">7.</span>转置<br>    行列互换<br></code></pre></td></tr></table></figure><h3 id="4-6-数组间运算"><a href="#4-6-数组间运算" class="headerlink" title="4.6 数组间运算"></a>4.6 数组间运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>数组和数字是直接可以进行运算<br><span class="hljs-number">2.</span>数组和数组<br>    需要满足广播机制<br>        维度相同<br>        shape对应位置为<span class="hljs-number">1</span><br><span class="hljs-number">3.</span>矩阵乘法api<br>    np.dot --点乘<br>    np.matmul -- 矩阵相乘<br>    注意：两者之间在进行矩阵相乘时候，没有区别<br>    但是，dot支持矩阵和数字相乘<br></code></pre></td></tr></table></figure><h2 id="五-Pandas"><a href="#五-Pandas" class="headerlink" title="五 .Pandas"></a>五 .Pandas</h2><h3 id="5-1Pandas介绍"><a href="#5-1Pandas介绍" class="headerlink" title="5.1Pandas介绍"></a>5.1Pandas介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>pandas概念<br>    开源的数据挖掘库<br>    用于数据探索<br>    封装了matplotlib,numpy<br><span class="hljs-number">2.</span>案例知识点<br>    <span class="hljs-number">1.</span>创建DataFrame<br>        pd.DataFrame(ndarray)<br>    <span class="hljs-number">2.</span>创建日期<br>        pd.date_range()<br>            start -- 开始日期<br>            end -- 结束日期<br>            periods -- 时间跨度<br>            freq -- 统计时间方式<br><span class="hljs-number">3.</span>DataFrame介绍 -- 类比二维数组[***]<br>    <span class="hljs-number">1.</span>dataframe属性<br>        对象.shape<br>        对象.index<br>        对象.columns<br>        对象.values<br>        对象.T<br>        对象.head()<br>        对象.tail()<br>    <span class="hljs-number">2.</span>dataframe设置索引<br>        <span class="hljs-number">1.</span>修改行列索引<br>            必须整行或者整列去进行修改<br>        <span class="hljs-number">2.</span>重设索引<br>            对象.reset_index()<br>        <span class="hljs-number">3.</span>设置新索引<br>            对象.set_index()<br>            如果设置索引是两个的时候就是multiIndex<br><span class="hljs-number">4.</span>MultiIndex和panel -- 类比三维数组[**]<br>    <span class="hljs-number">1.</span>MultiIndex<br>        对象.index<br>        对象.index.names<br>    <span class="hljs-number">2.</span>panel -- 已经弃用,了解<br>        直接没法进行查看里面的值,需要通过索引获取<br>        对象[:, :, <span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-number">5.</span>Series  -- 一维数组[**]<br>    <span class="hljs-number">1.</span>创建<br>        通过ndarray创建<br>        指定索引创建<br>        通过字典创建<br>    <span class="hljs-number">2.</span>属性<br>        对象.index<br>        对象.values<br></code></pre></td></tr></table></figure><h3 id="5-2-基本数据操作"><a href="#5-2-基本数据操作" class="headerlink" title="5.2 基本数据操作"></a>5.2 基本数据操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>索引操作<br>    <span class="hljs-number">1.</span>直接 -- 先列后行<br>    <span class="hljs-number">2.</span>loc -- 先行后列，索引值<br>    <span class="hljs-number">3.</span>iloc -- 先行后列，索引值的下标<br>    <span class="hljs-number">4.</span>ix -- 先行后列，混合索引<br><span class="hljs-number">2.</span>赋值操作<br>    <span class="hljs-number">1.</span>对象[<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-number">2.</span>对象.close<br><span class="hljs-number">3.</span>排序<br>    <span class="hljs-number">1.</span>dataframe<br>        对象.sort_values()<br>            by -- 按照什么排序<br>            ascending -- 升降序<br>        对象.sort_index()<br>        注意:by这个参数可以接受多个值,优先按照第一个索引排序,如果相同,按照后面的<br>    <span class="hljs-number">2.</span>series<br>        对象.sort_values()<br>        对象.sort_index()<br></code></pre></td></tr></table></figure><h3 id="5-3-DataFrame运算"><a href="#5-3-DataFrame运算" class="headerlink" title="5.3 DataFrame运算"></a>5.3 DataFrame运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>算术运算<br>    直接使用方法, add, sub ...<br>    也可以用符号<br><span class="hljs-number">2.</span>逻辑运算<br>    <span class="hljs-number">2.1</span> 逻辑运算符号&lt;、 &gt;、|、 &amp;<br>        直接判断<br>    <span class="hljs-number">2.2</span> 逻辑运算函数<br>        对象.query(<span class="hljs-string">&quot;&quot;</span>)<br>        对象.isin([])<br><span class="hljs-number">3.</span>统计函数<br>    对象.describe()<br>    统计函数<br>        <span class="hljs-built_in">sum</span><br>        mean<br>        ...<br>        mode -- 众数<br>        idxmax -- 最大值的索引<br>        idxmin -- 最小值的索引<br><span class="hljs-number">4.</span>累计统计函数<br>    函数      作用<br>    cumsum  计算前<span class="hljs-number">1</span>/<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/…/n个数的和<br>    cummax  计算前<span class="hljs-number">1</span>/<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/…/n个数的最大值<br>    cummin  计算前<span class="hljs-number">1</span>/<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/…/n个数的最小值<br>    cumprod 计算前<span class="hljs-number">1</span>/<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/…/n个数的积<br><span class="hljs-number">5.</span>自定义运算[***]<br>    apply(func, axis=)<br>        func -- 自己定义的函数<br></code></pre></td></tr></table></figure><h3 id="5-4-Pandas画图"><a href="#5-4-Pandas画图" class="headerlink" title="5.4 Pandas画图"></a>5.4 Pandas画图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">对象.plot()<br>    kind --<br>        line -- 折线图<br>        bar<br>        barh -- 条形图旋转<br>        hist<br>        pie<br>        scatter<br></code></pre></td></tr></table></figure><h3 id="5-5-文件读取与存储"><a href="#5-5-文件读取与存储" class="headerlink" title="5.5 文件读取与存储"></a>5.5 文件读取与存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>csv<br>    <span class="hljs-number">1.</span>读取-- pd.read_csv<br>        参数:<br>        usecols -- 需要哪列<br>    <span class="hljs-number">2.</span>存储 -- 对象.to_csv<br>        参数:<br>        columns -- 保存哪列<br><span class="hljs-number">2.</span>hdf<br>    <span class="hljs-number">1.</span>读取 -- pd.read_hdf()<br>    <span class="hljs-number">2.</span>写入 -- 对象.to_hdf()<br>        注意:保存文件是****.h5<br><span class="hljs-number">3.j</span>son<br>    <span class="hljs-number">1.</span>读取 -- pd.read_json()<br>    <span class="hljs-number">2.</span>写入 -- 对象.to_josn()<br>        参数:<br>        orient -- 按照什么方式进行读取或者写入<br>        lines -- 是否按照行读取和写入<br><span class="hljs-number">4.</span>推荐使用hdf<br>    <span class="hljs-number">1.</span>压缩方式,读取效率快<br>    <span class="hljs-number">2.</span>压缩后,节省空间<br>    <span class="hljs-number">3.</span>支持跨平台<br></code></pre></td></tr></table></figure><h3 id="5-6-高级处理-缺失值处理"><a href="#5-6-高级处理-缺失值处理" class="headerlink" title="5.6 高级处理-缺失值处理"></a>5.6 高级处理-缺失值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">判断数据是否为NaN：<br>    np.<span class="hljs-built_in">any</span>(pd.isnull(movie))  <span class="hljs-comment"># 里面如果有一个缺失值,就返回True</span><br>    np.<span class="hljs-built_in">all</span>(pd.notnull(movie))  <span class="hljs-comment"># 里面如果有一个缺失值,就返回False</span><br>处理方式：<br>    存在缺失值nan,并且是np.nan:<br>    <span class="hljs-number">1</span>、删除存在缺失值的:dropna(axis=<span class="hljs-string">&#x27;rows&#x27;</span>)<br>        注：不会修改原数据，需要接受返回值<br>    <span class="hljs-number">2</span>、替换缺失值:fillna(value, inplace=<span class="hljs-literal">True</span>)<br>        value:替换成的值<br>        inplace:<span class="hljs-literal">True</span>:会修改原数据，<span class="hljs-literal">False</span>:不替换修改原数据，生成新的对象<br>不是缺失值nan，有默认标记的<br>    对象.replace()<br>        to_replace -- 替换前的值<br>        value -- 替换后的值<br></code></pre></td></tr></table></figure><h3 id="5-7-高级处理-数据离散化"><a href="#5-7-高级处理-数据离散化" class="headerlink" title="5.7 高级处理-数据离散化"></a>5.7 高级处理-数据离散化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>什么是数据离散化<br>    把一些数据分到某个区间,最后用不同的符号或者数字表达<br><span class="hljs-number">2.</span>数据离散化api<br>    pd.qcut() -- 把数据大致分为数量相等的几类<br>    pd.cut()  -- 指定分组间隔<br>    数量统计:<br>        对象.value_counts()<br><span class="hljs-number">3.</span>one-hot编码<br>    就是把数据转换成为<span class="hljs-number">0</span>,<span class="hljs-number">1</span>统计类型<br>    别名:哑变量,热独编码<br>    api:<br>        pd.get_dummies()<br></code></pre></td></tr></table></figure><h3 id="5-8-高级处理-合并"><a href="#5-8-高级处理-合并" class="headerlink" title="5.8 高级处理-合并"></a>5.8 高级处理-合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">pd.concat()<br>    axis=<br>pd.merge()<br>    left -- 左表<br>    right -- 右表<br>    on -- 指定键<br>    how -- 按照什么方式进行拼接<br></code></pre></td></tr></table></figure><h3 id="5-9-高级处理-交叉表与透视表"><a href="#5-9-高级处理-交叉表与透视表" class="headerlink" title="5.9 高级处理-交叉表与透视表"></a>5.9 高级处理-交叉表与透视表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>什么交叉表,透视表<br>    就是探索两列数据之间的关系<br><span class="hljs-number">2.</span>pd.crosstab()<br>    返回具体数量<br><span class="hljs-number">3.</span>对象.pivot_table()<br>    返回占比情况<br></code></pre></td></tr></table></figure><h3 id="5-10-高级处理-分组与聚合"><a href="#5-10-高级处理-分组与聚合" class="headerlink" title="5.10 高级处理-分组与聚合"></a>5.10 高级处理-分组与聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>api<br>    对象.groupby()<br>        参数:as_index -- 是否进行索引<br>    注意:可以对数据进行对此分组,需要里面传递一个列表进行完成.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo YAMLException</title>
    <link href="/2020/10/30/blog/hexo%E6%8A%A5%E9%94%99/"/>
    <url>/2020/10/30/blog/hexo%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-YAMLException-cannot-read-a-block-mapping-entry-a-multi-line-key-may-not-be-an-implicit-key-a"><a href="#hexo-YAMLException-cannot-read-a-block-mapping-entry-a-multi-line-key-may-not-be-an-implicit-key-a" class="headerlink" title="hexo YAMLException: cannot read a block mapping entry; a multi line key may not be an implicit key a"></a>hexo YAMLException: cannot read a block mapping entry; a multi line key may not be an implicit key a</h2><p>安装 heox时报错：</p><p>YAMLException: cannot read a block mapping entry; a multi line key may not be an implicit key at line 5, column 1: # Site</p><p>YAMLException: cannot read a block mapping entry; a multi line key may not be an implicit key at line 13, column 1: # URL</p><p>启动hexo 时包上面的错误时，你们都是配置文件：_config.yml  中 # Site #URL 属性设置后面的：需要有空格再填写内容！！！</p><p>如果按照流程步骤 执行hexo server 没有反应，说明你少了npm install  这部，没有安装hexo server 模块</p>]]></content>
    
    
    <categories>
      
      <category>hexo_false</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客Front-matter设置</title>
    <link href="/2020/10/29/blog/%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/10/29/blog/%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">---<br>title: Hello World<br>date:  <span class="hljs-number">2013</span>/<span class="hljs-number">7</span>/<span class="hljs-number">13</span> <span class="hljs-number">20</span>:<span class="hljs-number">46</span>:<span class="hljs-number">25</span><br>---<br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="center">layout</td><td align="center">布局</td><td align="left"></td></tr><tr><td align="center">title</td><td align="center">标题</td><td align="left">文章的文件名</td></tr><tr><td align="center">date</td><td align="center">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="center">updated</td><td align="center">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="center">comments</td><td align="center">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="center">tags</td><td align="center">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="center">categories</td><td align="center">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="center">permalink</td><td align="center">覆盖文章网址</td><td align="left"></td></tr><tr><td align="center">disableNunjucks</td><td align="center"><code>Disable rendering of Nunjucks tag &#123;&#123; &#125;&#125;/&#123;% %&#125; and tag plugins when enabled</code></td><td align="left"></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <strong>Foo, Bar</strong> 不等于 <strong>Bar, Foo</strong>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><h2 id="分类方法的分歧"><a href="#分类方法的分歧" class="headerlink" title="分类方法的分歧"></a>分类方法的分歧</h2><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">categories:<br>  - Diary<br>  - Life<br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为<code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">categories:<br>- [Diary, PlayStation]<br>- [Diary, Games]<br>- [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时<code> Life</code> 是一个没有子分类的分类。</p><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>--- </code>代换成 <code>;;;</code> 即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>,<br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br>;;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
